terraform {

  required_providers {
    yandex = {
      source = "yandex-cloud/yandex"
    }
  }
}

resource "yandex_kms_symmetric_key" "key-a" {
  count             = var.encrypt ? 1 : 0
  name              = "${var.env}-${var.bucket_names[0]}"
  description       = "Generated by Terraform"
  default_algorithm = "AES_128"
  rotation_period   = "8760h" // equal to 1 year
}

resource "yandex_storage_bucket" "main" {
  for_each              = { for b in var.bucket_names : b => b }
  bucket                = "${var.prefix}-${var.env}-${each.key}"
  acl                   = var.acl
  max_size              = var.max_size
  default_storage_class = var.default_storage_class
  force_destroy         = var.force_destroy

  dynamic "server_side_encryption_configuration" {
    for_each = var.encrypt ? [1] : []
    content {
      rule {
        apply_server_side_encryption_by_default {
          kms_master_key_id = yandex_kms_symmetric_key.key-a[0].id
          sse_algorithm     = "aws:kms"
        }
      }
    }
  }


  anonymous_access_flags {
    read = var.anonymous_access_flags_read
    list = var.anonymous_access_flags_list
  }

  lifecycle_rule {
    id                                     = "abortmultiparts"
    prefix                                 = ""
    enabled                                = true
    abort_incomplete_multipart_upload_days = 7
  }

  lifecycle_rule {
    id      = "Transition current version to COLD storage"
    prefix  = ""
    enabled = var.status_lifecycle_rule_transition_current_version_to_cold_storage

    transition {
      days          = var.days_lifecycle_rule_transition_current_version_to_cold_storage
      storage_class = "COLD"
    }
  }

  lifecycle_rule {
    id      = "Expiration current version"
    prefix  = ""
    enabled = var.status_lifecycle_rule_expiration_current_version

    expiration {
      days = var.days_lifecycle_rule_expiration_current_version_to_cold_storage
    }
  }

  lifecycle_rule {
    id      = "Transition noncurrent version to COLD storage"
    prefix  = ""
    enabled = var.status_lifecycle_rule_transition_noncurrent_version_to_cold_storage

    noncurrent_version_transition {
      days          = var.days_lifecycle_rule_transition_noncurrent_version_to_cold_storage
      storage_class = "COLD"
    }
  }

  lifecycle_rule {
    id      = "Expiration noncurrent version"
    prefix  = ""
    enabled = var.status_lifecycle_rule_expiration_noncurrent_version

    noncurrent_version_expiration {
      days = var.days_lifecycle_rule_expiration_noncurrent_version_to_cold_storage
    }
  }

  versioning {
    enabled = var.versioning
  }
}












